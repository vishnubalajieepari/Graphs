bool isbipart(int s,vector<int>adj[],vector<int>&col)
    {
        queue<int>q;
        q.push(s);
        col[s]=1;
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto it:adj[node])
            {
                if(col[it]==-1)
                {
                    col[it]=1-col[node];
                    q.push(it);
                }
                else if(col[it]==col[node])
                {
                    return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>adj[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<graph[i].size();j++)
            {
                adj[i].push_back(graph[i][j]);
            }
        }
        vector<int>col(n,-1);
        for(int i=0;i<n;i++)
        {
            if(col[i]==-1)
            {
                if(!isbipart(i,adj,col))
                    return false;
            }
        }
        return true;
    }
